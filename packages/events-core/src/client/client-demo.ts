// packages/events-core/src/client/client-demo.ts
// Run this code with `pnpm tsx src/client/client-demo.ts`
import path from "node:path";
import process from "node:process";
import fs from "node:fs/promises";
import {
  createTRPCClient,
  httpBatchStreamLink,
  loggerLink,
  splitLink,
  httpSubscriptionLink,
} from "@trpc/client";
import SuperJSON from "superjson";
import { Logger } from "tslog";
import { v4 as uuidv4 } from "uuid";
// Import EventSource polyfill for Node.js
import { EventSourcePolyfill } from "event-source-polyfill";
import type { AppRouter } from "../server/root-router.js";

// Create a logger
const logger = new Logger({ name: "TRPCClient" });

// Server configuration
const getUrl = () => {
  const base = (() => {
    if (typeof window !== "undefined") return window.location.origin;
    if (process.env.APP_URL) return process.env.APP_URL;
    return `http://localhost:${process.env.PORT ?? 3000}`;
  })();

  return `${base}/api/trpc`;
};

// Create tRPC client
const trpc = createTRPCClient<AppRouter>({
  links: [
    // Add pretty logs to your console in development and logs errors in production
    loggerLink({
      enabled: (opts) =>
        process.env.NODE_ENV === "development" ||
        (opts.direction === "down" && opts.result instanceof Error),
      console: {
        log: (...args) => logger.info(...args),
        error: (...args) => logger.error(...args),
      },
    }),
    // Support for SSE subscriptions
    splitLink({
      condition: (op) => op.type === "subscription",
      true: httpSubscriptionLink({
        url: getUrl(),
        transformer: SuperJSON,
        // Use EventSource polyfill for Node.js environment
        EventSource: EventSourcePolyfill,
      }),
      false: httpBatchStreamLink({
        url: getUrl(),
        transformer: SuperJSON,
      }),
    }),
  ],
});

// Helper function to wait a specified number of milliseconds
const wait = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

// Setup demo folder structure and files
async function setupDemoEnvironment() {
  logger.info("Setting up demo environment...");

  const baseDir = path.join(process.cwd(), "my-demo");
  const userDataDir = path.join(baseDir, "user-data");
  const demoProjectDir = path.join(baseDir, "demo-project");

  // Create directories
  await fs.mkdir(userDataDir, { recursive: true });
  await fs.mkdir(demoProjectDir, { recursive: true });
  logger.info(`Created directories: ${userDataDir}, ${demoProjectDir}`);

  // Create a simple demo file for the file API to open
  const demoFileName = "demo-file.ts";
  const demoFilePath = path.join(demoProjectDir, demoFileName);

  const demoFileContent = `// Demo TypeScript file for Events Core API testing
// This file was automatically generated by the client demo

export interface DemoInterface {
  id: string;
  name: string;
  createdAt: Date;
}

export class DemoClass implements DemoInterface {
  constructor(
    public id: string,
    public name: string,
    public createdAt: Date = new Date()
  ) {}

  greet(): string {
    return \`Hello from \${this.name}! Created at \${this.createdAt.toISOString()}\`;
  }

  toJSON() {
    return {
      id: this.id,
      name: this.name,
      createdAt: this.createdAt.toISOString(),
    };
  }
}

// Example usage
const demo = new DemoClass("demo-1", "Events Core Demo");
console.log(demo.greet());

export default DemoClass;
`;

  // Check if demo file already exists
  try {
    await fs.access(demoFilePath);
    logger.info(`Demo file already exists: ${demoFilePath}`);
  } catch {
    // File doesn't exist, create it
    await fs.writeFile(demoFilePath, demoFileContent, "utf8");
    logger.info(`Created demo file: ${demoFilePath}`);
  }

  // Create a simple README file as well
  const readmePath = path.join(demoProjectDir, "README.md");
  const readmeContent = `# Events Core Demo Project

This is a demo project created by the Events Core client demo.

## Contents

- \`demo-file.ts\` - A simple TypeScript file for testing the file API
- \`README.md\` - This file

## Purpose

This folder serves as a test project folder for demonstrating:

- Project folder management
- File watching
- Task creation
- Chat creation
- File API operations

Generated at: ${new Date().toISOString()}
`;

  try {
    await fs.access(readmePath);
    logger.info(`README already exists: ${readmePath}`);
  } catch {
    await fs.writeFile(readmePath, readmeContent, "utf8");
    logger.info(`Created README: ${readmePath}`);
  }

  return {
    baseDir,
    userDataDir,
    demoProjectDir,
    demoFilePath,
    readmePath,
  };
}

async function main() {
  logger.info("Starting Events Core client demo...");

  // 0. Setup demo environment first
  logger.info("\n--- Setting up Demo Environment ---");
  const { baseDir, userDataDir, demoProjectDir, demoFilePath, readmePath } =
    await setupDemoEnvironment();

  // Set up paths for the demo
  const testFolderPath = demoProjectDir;
  let projectFolderId: string | undefined;
  let chatId: string | undefined;
  let taskId: string | undefined;
  let chatFilePath: string | undefined;

  logger.info(`Demo base directory: ${baseDir}`);
  logger.info(`User data directory: ${userDataDir}`);
  logger.info(`Demo project directory: ${demoProjectDir}`);

  // 1. Subscribe to specific events using type-safe subscriptions
  logger.info("\n--- Setting up Type-Safe Event Subscriptions ---");

  // Subscribe to chat events - Now properly typed as ChatUpdatedEvent
  const chatEventSubscription = trpc.event.chatEvents.subscribe(
    { lastEventId: null },
    {
      onData(event) {
        // event.data is now properly typed as ChatUpdatedEvent!
        logger.info(
          `ChatEvent: ${event.data.updateType} - ${new Date(event.data.timestamp).toISOString()}`
        );
        logger.info(`  Chat ID: ${event.data.chatId}`);
      },
      onError(err) {
        logger.error("Chat event subscription error:", err);
      },
    }
  );

  // Subscribe to task events - Now properly typed as TaskUpdatedEvent
  const taskEventSubscription = trpc.event.taskEvents.subscribe(
    { lastEventId: null },
    {
      onData(event) {
        // event.data is now properly typed as TaskUpdatedEvent!
        logger.info(
          `TaskEvent: ${event.data.updateType} - ${new Date(event.data.timestamp).toISOString()}`
        );
        logger.info(`  Task ID: ${event.data.taskId}`);
      },
      onError(err) {
        logger.error("Task event subscription error:", err);
      },
    }
  );

  // Subscribe to project folder events - Now properly typed as ProjectFolderUpdatedEvent
  const projectFolderEventSubscription =
    trpc.event.projectFolderEvents.subscribe(
      { lastEventId: null },
      {
        onData(event) {
          // event.data is now properly typed as ProjectFolderUpdatedEvent!
          logger.info(
            `ProjectFolderEvent: ${event.data.updateType} - ${new Date(event.data.timestamp).toISOString()}`
          );
        },
        onError(err) {
          logger.error("Project folder event subscription error:", err);
        },
      }
    );

  // Subscribe to file watcher events - Now properly typed as FileWatcherEvent
  const fileWatcherEventSubscription = trpc.event.fileWatcherEvents.subscribe(
    { lastEventId: null },
    {
      onData(event) {
        // event.data is now properly typed as FileWatcherEvent!
        logger.info(
          `FileEvent: ${event.data.eventType} - ${new Date(event.data.timestamp).toISOString()}`
        );
        logger.info(`  File: ${event.data.absoluteFilePath}`);
      },
      onError(err) {
        logger.error("File watcher event subscription error:", err);
      },
    }
  );

  logger.info(
    "Type-safe event subscriptions active, events will be logged as they occur"
  );

  // 2. Initial app loading - Simulating app initialization
  logger.info("\n--- App Initialization ---");

  // Get user settings
  const settings = await trpc.userSettings.getSettings.query();
  logger.info("Current user settings:", settings);

  // List all project folders - part of app initialization
  const initialProjectFolders =
    await trpc.projectFolder.getAllProjectFolders.query();
  logger.info(
    `Found ${initialProjectFolders.length} project folders during initialization`
  );

  // Get folder tree for each project folder - part of app initialization
  for (const folder of initialProjectFolders) {
    logger.info(`Getting folder tree for: ${folder.path}`);
    const folderTree = await trpc.projectFolder.getFolderTree.query({
      projectFolderPath: folder.path,
    });
    logger.info(`Folder tree for ${folder.name} retrieved`);
  }

  // Start watching all project folders - only needs to be called once during app init
  const watchResult =
    await trpc.projectFolder.startWatchingAllProjectFolders.mutate({
      correlationId: uuidv4(),
    });
  logger.info(`Started watching ${watchResult.count} project folders`);

  // 3. Project Folder API examples
  logger.info("\n--- Project Folder API ---");

  // Add a new project folder
  logger.info(`Adding test project folder at: ${testFolderPath}`);
  const addFolderResult = await trpc.projectFolder.addProjectFolder.mutate({
    projectFolderPath: testFolderPath,
    correlationId: uuidv4(),
  });

  if (addFolderResult.success && addFolderResult.projectFolder) {
    projectFolderId = addFolderResult.projectFolder.id;
    logger.info(`Added project folder with ID: ${projectFolderId}`);
  } else {
    logger.warn(`Note: ${addFolderResult.message}`);

    // If the folder already exists, find its ID
    const allFolders = await trpc.projectFolder.getAllProjectFolders.query();
    const existingFolder = allFolders.find((f) => f.path === testFolderPath);

    if (existingFolder) {
      projectFolderId = existingFolder.id;
      logger.info(`Using existing project folder with ID: ${projectFolderId}`);
    }
  }

  // Get folder tree for the new/existing folder
  const folderTree = await trpc.projectFolder.getFolderTree.query({
    projectFolderPath: testFolderPath,
  });
  logger.info("Folder tree retrieved");

  // 4. Task API examples
  logger.info("\n--- Task API ---");

  // Create a new task in the project folder
  const newTask = await trpc.task.create.mutate({
    taskName: "Demo Task",
    taskConfig: { description: "This is a task created by the client demo" },
    parentAbsoluteDirectoryPath: testFolderPath,
    correlationId: uuidv4(),
  });

  taskId = newTask.taskId;
  logger.info(`Created task with ID: ${taskId}`);

  // Start the task
  const startedTask = await trpc.task.start.mutate({
    taskId,
    correlationId: uuidv4(),
  });
  logger.info(`Started task, current status: ${startedTask.status}`);

  // Get task by ID
  const taskById = await trpc.task.getById.query({
    taskId,
  });
  logger.info(`Task details:`, taskById);

  // Get all tasks
  const allTasks = await trpc.task.getAll.query();
  logger.info(`Found ${allTasks.length} tasks`);

  // 5. Chat API examples
  logger.info("\n--- Chat API ---");

  // Create a new chat in the project folder
  const newChat = await trpc.chat.createChat.mutate({
    targetDirectoryAbsolutePath: testFolderPath,
    newTask: false,
    mode: "chat",
    knowledge: [],
    prompt: "Initial message for the demo chat",
    model: "default",
    correlationId: uuidv4(),
  });

  chatId = newChat.id;
  chatFilePath = newChat.absoluteFilePath;
  logger.info(`Created chat with ID: ${chatId}`);
  logger.info(`Chat file path: ${chatFilePath}`);

  // Wait for AI response events (3 seconds)
  logger.info("Waiting for AI response events (3 seconds)...");
  await wait(3000);

  // Submit a message to the chat
  await trpc.chat.submitMessage.mutate({
    chatId,
    message: "Hello, this is a test message from the client demo!",
    correlationId: uuidv4(),
  });
  logger.info("Message submitted to chat");

  // Wait for AI response events (3 seconds)
  logger.info("Waiting for AI response events (3 seconds)...");
  await wait(3000);

  // Get chat by ID
  const chatById = await trpc.chat.getById.query({
    chatId,
  });
  logger.info(`Chat has ${chatById.messages.length} messages`);

  // Get all chats
  const allChats = await trpc.chat.getAll.query();
  logger.info(`Found ${allChats.length} chats`);

  // Open chat file
  const openedChat = await trpc.chat.openChatFile.query({
    filePath: chatFilePath,
    correlationId: uuidv4(),
  });
  logger.info(`Opened chat file with ${openedChat.messages.length} messages`);

  // Submit another message to the opened chat
  await trpc.chat.submitMessage.mutate({
    chatId: openedChat.id,
    message: "This message was sent after opening the chat file",
    correlationId: uuidv4(),
  });
  logger.info("Submitted another message to the opened chat");

  // Wait for AI response events (3 seconds)
  logger.info("Waiting for AI response events (3 seconds)...");
  await wait(3000);

  // 6. File API examples
  logger.info("\n--- File API ---");

  // Test with the demo TypeScript file we created
  logger.info(`Testing file API with demo file: ${demoFilePath}`);
  const demoFileType = await trpc.file.getFileType.query({
    filePath: demoFilePath,
  });
  logger.info(`Demo file type: ${demoFileType}`);

  const demoFileContent = await trpc.file.openFile.query({
    filePath: demoFilePath,
    correlationId: uuidv4(),
  });
  logger.info(`Opened demo file with type: ${demoFileContent.fileType}`);
  logger.info(
    `Demo file content length: ${demoFileContent.content.length} characters`
  );

  // Test with the README file as well
  logger.info(`Testing file API with README: ${readmePath}`);
  const readmeFileType = await trpc.file.getFileType.query({
    filePath: readmePath,
  });
  logger.info(`README file type: ${readmeFileType}`);

  const readmeFileContent = await trpc.file.openFile.query({
    filePath: readmePath,
    correlationId: uuidv4(),
  });
  logger.info(`Opened README with type: ${readmeFileContent.fileType}`);
  logger.info(
    `README content length: ${readmeFileContent.content.length} characters`
  );

  // 7. Clean up - Remove the project folder if we added it
  logger.info("\n--- Cleanup ---");

  // Only remove the project folder if we added it during this run
  if (projectFolderId && addFolderResult.success) {
    const removeResult = await trpc.projectFolder.removeProjectFolder.mutate({
      projectFolderId,
      correlationId: uuidv4(),
    });

    if (removeResult.success) {
      logger.info(
        `Successfully removed project folder with ID: ${projectFolderId}`
      );
    } else {
      logger.warn(`Failed to remove project folder: ${removeResult.message}`);
    }
  } else {
    logger.info(
      "Skipping project folder removal as it existed before the demo"
    );
  }

  // Wait for 2 seconds to observe any final events
  logger.info("\n--- Waiting for 2 seconds to observe final events ---");
  await wait(2000);

  // Unsubscribe from all events
  logger.info("Unsubscribing from events");
  chatEventSubscription.unsubscribe();
  taskEventSubscription.unsubscribe();
  projectFolderEventSubscription.unsubscribe();
  fileWatcherEventSubscription.unsubscribe();

  logger.info("\n--- Demo completed successfully ---");
  logger.info(`Demo files remain in: ${baseDir}`);
}

// Run the client demo
main().catch((error) => {
  logger.error("Fatal error:", error);
  process.exit(1);
});
